Projects specs are rspecs so write in Ruby

num % 9 for super quick digital root

Day 1
Big O Lecture
- worst case
    example of sorting algorithm
      worst case is that the array is reversed
      best case is the array is sorted
- # of steps given n-size input
    constant
    logirithmic
    linear
    exponential
    polynomial
- average case
- asymptotic
        -  asymptotic is a line that approaches a curve but never touches.
        - A curve and a line that get closer but do not intersect are examples of a curve and a line that are asymptotic to each other.
    related with the dominant term taking over the nondominant
- most dominant term wins
- upper bound
    if we plot it on the graph, it will give us the upper bound
    the best case scenario would be the lower bound aka finding it on the first go
- time & space complexity
- machine agnostic
    - hardware doesn't matter


You'll get a logorithmic tree of O(log(n)) when you take N and each level of recursion you are dividing by two
First recursion divides by the most then slowly over time you get closer to the target

perversed pivots
pathalogical input - http://stackoverflow.com/questions/27768693/what-does-pathological-input-mean-with-respect-to-sorting-algorithms
  - Hence, a pathological case for an algorithm is the worst possible input it may have to work on,
    one that is so disrupted or badly arranged that it makes you work the hardest to perform your task over.
    The worst case execution complexity is derived from that and is usually used to describe the algorithm complexity for an unknown data.
    In some cases, when the worst case is really obscure or unlikely, it's also ok to talk about the common case complexity and find algorithms that optimize that.


Quick Select
select the kth largest number in the array
you are partitioning, at the partition step them you only need to go down on side, don't need to recursive both sids


Master Theorum??
- sum of geometric system is upper bound of 2n which in the end becomes O(n) time, linear
look up sum of geometric system

Big O - Quiz Homework
  For each of the following loops with a method call, determine the overall complexity.
  Assume that method f takes constant time, and that method g takes time linear in the value of its parameter.

15. O(log N) - I answered O(N)
def wonky_func(arr)
  i = 1
  while(i < arr.length)
    ret_val = add(arr[i], arr[i+1]) if i < arr.length-1
    puts ret_val/100000 + ret_val * 150000
    i *= 2
  end
end
REVIEW is a while loop O(log N) time?

17. O(2^N) - I guessed O(N^N) which I should of known is not even a thing
class Array
  def grab_bag
    return [[]] if empty?
    bag = take(count - 1).grab_bag
    bag.concat(bag.map { |handful| handful + [last] })
  end
end

18. O(N!) - I guessed O(2^N)
Array.prototype.mixyUppy = function(){
  if (this.length === 1) {
    return [this];
  }

  var mixes = [];
  var prevMixes = this.slice(1).mixyUppy();

  prevMixes.forEach(function(mix) {
    mix.forEach(function(el, i) {
      mixes.push(
        mix.slice(0, i).concat(this[0], mix.slice(i))
      );
    }.bind(this));

    mixes.push(mix.concat(this[0]));
  }.bind(this));

  return mixes;
};

20. O(log N) - I said O(N)
int recursiveFun3(int n)
{
  if (n <= 0)
    return 1;
  else
    return 1 + recursiveFun3(n/5);
}

Explain 21.
